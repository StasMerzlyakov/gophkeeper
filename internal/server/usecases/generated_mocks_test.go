// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/StasMerzlyakov/gophkeeper/internal/server/usecases (interfaces: StateFullStorage,TemporaryStorage)

// Package usecases_test is a generated GoMock package.
package usecases_test

import (
	context "context"
	reflect "reflect"

	domain "github.com/StasMerzlyakov/gophkeeper/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockStateFullStorage is a mock of StateFullStorage interface.
type MockStateFullStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStateFullStorageMockRecorder
}

// MockStateFullStorageMockRecorder is the mock recorder for MockStateFullStorage.
type MockStateFullStorageMockRecorder struct {
	mock *MockStateFullStorage
}

// NewMockStateFullStorage creates a new mock instance.
func NewMockStateFullStorage(ctrl *gomock.Controller) *MockStateFullStorage {
	mock := &MockStateFullStorage{ctrl: ctrl}
	mock.recorder = &MockStateFullStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateFullStorage) EXPECT() *MockStateFullStorageMockRecorder {
	return m.recorder
}

// GetLoginData mocks base method.
func (m *MockStateFullStorage) GetLoginData(arg0 context.Context, arg1 string) (*domain.LoginData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginData", arg0, arg1)
	ret0, _ := ret[0].(*domain.LoginData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginData indicates an expected call of GetLoginData.
func (mr *MockStateFullStorageMockRecorder) GetLoginData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginData", reflect.TypeOf((*MockStateFullStorage)(nil).GetLoginData), arg0, arg1)
}

// IsEMailBusy mocks base method.
func (m *MockStateFullStorage) IsEMailBusy(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEMailBusy", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEMailBusy indicates an expected call of IsEMailBusy.
func (mr *MockStateFullStorageMockRecorder) IsEMailBusy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEMailBusy", reflect.TypeOf((*MockStateFullStorage)(nil).IsEMailBusy), arg0, arg1)
}

// Registrate mocks base method.
func (m *MockStateFullStorage) Registrate(arg0 context.Context, arg1 *domain.FullRegistrationData) (domain.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registrate", arg0, arg1)
	ret0, _ := ret[0].(domain.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Registrate indicates an expected call of Registrate.
func (mr *MockStateFullStorageMockRecorder) Registrate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registrate", reflect.TypeOf((*MockStateFullStorage)(nil).Registrate), arg0, arg1)
}

// MockTemporaryStorage is a mock of TemporaryStorage interface.
type MockTemporaryStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTemporaryStorageMockRecorder
}

// MockTemporaryStorageMockRecorder is the mock recorder for MockTemporaryStorage.
type MockTemporaryStorageMockRecorder struct {
	mock *MockTemporaryStorage
}

// NewMockTemporaryStorage creates a new mock instance.
func NewMockTemporaryStorage(ctrl *gomock.Controller) *MockTemporaryStorage {
	mock := &MockTemporaryStorage{ctrl: ctrl}
	mock.recorder = &MockTemporaryStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemporaryStorage) EXPECT() *MockTemporaryStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTemporaryStorage) Create(arg0 context.Context, arg1 domain.SessionID, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTemporaryStorageMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTemporaryStorage)(nil).Create), arg0, arg1, arg2)
}

// DeleteAndCreate mocks base method.
func (m *MockTemporaryStorage) DeleteAndCreate(arg0 context.Context, arg1, arg2 domain.SessionID, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAndCreate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAndCreate indicates an expected call of DeleteAndCreate.
func (mr *MockTemporaryStorageMockRecorder) DeleteAndCreate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAndCreate", reflect.TypeOf((*MockTemporaryStorage)(nil).DeleteAndCreate), arg0, arg1, arg2, arg3)
}

// LoadAndDelete mocks base method.
func (m *MockTemporaryStorage) LoadAndDelete(arg0 context.Context, arg1 domain.SessionID) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAndDelete", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAndDelete indicates an expected call of LoadAndDelete.
func (mr *MockTemporaryStorageMockRecorder) LoadAndDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAndDelete", reflect.TypeOf((*MockTemporaryStorage)(nil).LoadAndDelete), arg0, arg1)
}
