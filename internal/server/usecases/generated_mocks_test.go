// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/StasMerzlyakov/gophkeeper/internal/server/usecases (interfaces: StateFullStorage,TemporaryStorage,EMailSender,RegistrationHelper)

// Package usecases_test is a generated GoMock package.
package usecases_test

import (
	context "context"
	reflect "reflect"

	domain "github.com/StasMerzlyakov/gophkeeper/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockStateFullStorage is a mock of StateFullStorage interface.
type MockStateFullStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStateFullStorageMockRecorder
}

// MockStateFullStorageMockRecorder is the mock recorder for MockStateFullStorage.
type MockStateFullStorageMockRecorder struct {
	mock *MockStateFullStorage
}

// NewMockStateFullStorage creates a new mock instance.
func NewMockStateFullStorage(ctrl *gomock.Controller) *MockStateFullStorage {
	mock := &MockStateFullStorage{ctrl: ctrl}
	mock.recorder = &MockStateFullStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateFullStorage) EXPECT() *MockStateFullStorageMockRecorder {
	return m.recorder
}

// GetHelloData mocks base method.
func (m *MockStateFullStorage) GetHelloData(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHelloData", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHelloData indicates an expected call of GetHelloData.
func (mr *MockStateFullStorageMockRecorder) GetHelloData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHelloData", reflect.TypeOf((*MockStateFullStorage)(nil).GetHelloData), arg0)
}

// GetLoginData mocks base method.
func (m *MockStateFullStorage) GetLoginData(arg0 context.Context, arg1 string) (*domain.LoginData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginData", arg0, arg1)
	ret0, _ := ret[0].(*domain.LoginData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginData indicates an expected call of GetLoginData.
func (mr *MockStateFullStorageMockRecorder) GetLoginData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginData", reflect.TypeOf((*MockStateFullStorage)(nil).GetLoginData), arg0, arg1)
}

// IsEMailAvailable mocks base method.
func (m *MockStateFullStorage) IsEMailAvailable(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEMailAvailable", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEMailAvailable indicates an expected call of IsEMailAvailable.
func (mr *MockStateFullStorageMockRecorder) IsEMailAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEMailAvailable", reflect.TypeOf((*MockStateFullStorage)(nil).IsEMailAvailable), arg0, arg1)
}

// Registrate mocks base method.
func (m *MockStateFullStorage) Registrate(arg0 context.Context, arg1 *domain.FullRegistrationData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registrate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Registrate indicates an expected call of Registrate.
func (mr *MockStateFullStorageMockRecorder) Registrate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registrate", reflect.TypeOf((*MockStateFullStorage)(nil).Registrate), arg0, arg1)
}

// MockTemporaryStorage is a mock of TemporaryStorage interface.
type MockTemporaryStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTemporaryStorageMockRecorder
}

// MockTemporaryStorageMockRecorder is the mock recorder for MockTemporaryStorage.
type MockTemporaryStorageMockRecorder struct {
	mock *MockTemporaryStorage
}

// NewMockTemporaryStorage creates a new mock instance.
func NewMockTemporaryStorage(ctrl *gomock.Controller) *MockTemporaryStorage {
	mock := &MockTemporaryStorage{ctrl: ctrl}
	mock.recorder = &MockTemporaryStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemporaryStorage) EXPECT() *MockTemporaryStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTemporaryStorage) Create(arg0 context.Context, arg1 domain.SessionID, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTemporaryStorageMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTemporaryStorage)(nil).Create), arg0, arg1, arg2)
}

// DeleteAndCreate mocks base method.
func (m *MockTemporaryStorage) DeleteAndCreate(arg0 context.Context, arg1, arg2 domain.SessionID, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAndCreate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAndCreate indicates an expected call of DeleteAndCreate.
func (mr *MockTemporaryStorageMockRecorder) DeleteAndCreate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAndCreate", reflect.TypeOf((*MockTemporaryStorage)(nil).DeleteAndCreate), arg0, arg1, arg2, arg3)
}

// Load mocks base method.
func (m *MockTemporaryStorage) Load(arg0 context.Context, arg1 domain.SessionID) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockTemporaryStorageMockRecorder) Load(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockTemporaryStorage)(nil).Load), arg0, arg1)
}

// LoadAndDelete mocks base method.
func (m *MockTemporaryStorage) LoadAndDelete(arg0 context.Context, arg1 domain.SessionID) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAndDelete", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAndDelete indicates an expected call of LoadAndDelete.
func (mr *MockTemporaryStorageMockRecorder) LoadAndDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAndDelete", reflect.TypeOf((*MockTemporaryStorage)(nil).LoadAndDelete), arg0, arg1)
}

// MockEMailSender is a mock of EMailSender interface.
type MockEMailSender struct {
	ctrl     *gomock.Controller
	recorder *MockEMailSenderMockRecorder
}

// MockEMailSenderMockRecorder is the mock recorder for MockEMailSender.
type MockEMailSenderMockRecorder struct {
	mock *MockEMailSender
}

// NewMockEMailSender creates a new mock instance.
func NewMockEMailSender(ctrl *gomock.Controller) *MockEMailSender {
	mock := &MockEMailSender{ctrl: ctrl}
	mock.recorder = &MockEMailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEMailSender) EXPECT() *MockEMailSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockEMailSender) Send(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEMailSenderMockRecorder) Send(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEMailSender)(nil).Send), arg0, arg1, arg2)
}

// MockRegistrationHelper is a mock of RegistrationHelper interface.
type MockRegistrationHelper struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrationHelperMockRecorder
}

// MockRegistrationHelperMockRecorder is the mock recorder for MockRegistrationHelper.
type MockRegistrationHelperMockRecorder struct {
	mock *MockRegistrationHelper
}

// NewMockRegistrationHelper creates a new mock instance.
func NewMockRegistrationHelper(ctrl *gomock.Controller) *MockRegistrationHelper {
	mock := &MockRegistrationHelper{ctrl: ctrl}
	mock.recorder = &MockRegistrationHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistrationHelper) EXPECT() *MockRegistrationHelperMockRecorder {
	return m.recorder
}

// CheckEMailData mocks base method.
func (m *MockRegistrationHelper) CheckEMailData(arg0 *domain.EMailData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEMailData", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEMailData indicates an expected call of CheckEMailData.
func (mr *MockRegistrationHelperMockRecorder) CheckEMailData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEMailData", reflect.TypeOf((*MockRegistrationHelper)(nil).CheckEMailData), arg0)
}

// CheckHello mocks base method.
func (m *MockRegistrationHelper) CheckHello(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHello", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckHello indicates an expected call of CheckHello.
func (mr *MockRegistrationHelperMockRecorder) CheckHello(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHello", reflect.TypeOf((*MockRegistrationHelper)(nil).CheckHello), arg0)
}

// CheckPassword mocks base method.
func (m *MockRegistrationHelper) CheckPassword(arg0, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockRegistrationHelperMockRecorder) CheckPassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockRegistrationHelper)(nil).CheckPassword), arg0, arg1, arg2)
}

// CreateJWTToken mocks base method.
func (m *MockRegistrationHelper) CreateJWTToken(arg0 domain.UserID) (domain.JWTToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJWTToken", arg0)
	ret0, _ := ret[0].(domain.JWTToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJWTToken indicates an expected call of CreateJWTToken.
func (mr *MockRegistrationHelperMockRecorder) CreateJWTToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJWTToken", reflect.TypeOf((*MockRegistrationHelper)(nil).CreateJWTToken), arg0)
}

// DecryptData mocks base method.
func (m *MockRegistrationHelper) DecryptData(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptData", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptData indicates an expected call of DecryptData.
func (mr *MockRegistrationHelperMockRecorder) DecryptData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptData", reflect.TypeOf((*MockRegistrationHelper)(nil).DecryptData), arg0)
}

// EncryptData mocks base method.
func (m *MockRegistrationHelper) EncryptData(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptData", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptData indicates an expected call of EncryptData.
func (mr *MockRegistrationHelperMockRecorder) EncryptData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptData", reflect.TypeOf((*MockRegistrationHelper)(nil).EncryptData), arg0)
}

// GenerateHello mocks base method.
func (m *MockRegistrationHelper) GenerateHello() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateHello")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateHello indicates an expected call of GenerateHello.
func (mr *MockRegistrationHelperMockRecorder) GenerateHello() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateHello", reflect.TypeOf((*MockRegistrationHelper)(nil).GenerateHello))
}

// GenerateQR mocks base method.
func (m *MockRegistrationHelper) GenerateQR(arg0 string) (string, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateQR", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateQR indicates an expected call of GenerateQR.
func (mr *MockRegistrationHelperMockRecorder) GenerateQR(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateQR", reflect.TypeOf((*MockRegistrationHelper)(nil).GenerateQR), arg0)
}

// HashPassword mocks base method.
func (m *MockRegistrationHelper) HashPassword(arg0 string) (*domain.HashData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", arg0)
	ret0, _ := ret[0].(*domain.HashData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockRegistrationHelperMockRecorder) HashPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockRegistrationHelper)(nil).HashPassword), arg0)
}

// NewSessionID mocks base method.
func (m *MockRegistrationHelper) NewSessionID() domain.SessionID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSessionID")
	ret0, _ := ret[0].(domain.SessionID)
	return ret0
}

// NewSessionID indicates an expected call of NewSessionID.
func (mr *MockRegistrationHelperMockRecorder) NewSessionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSessionID", reflect.TypeOf((*MockRegistrationHelper)(nil).NewSessionID))
}

// ParseJWTToken mocks base method.
func (m *MockRegistrationHelper) ParseJWTToken(arg0 domain.JWTToken) (domain.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJWTToken", arg0)
	ret0, _ := ret[0].(domain.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJWTToken indicates an expected call of ParseJWTToken.
func (mr *MockRegistrationHelperMockRecorder) ParseJWTToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJWTToken", reflect.TypeOf((*MockRegistrationHelper)(nil).ParseJWTToken), arg0)
}

// ValidatePassCode mocks base method.
func (m *MockRegistrationHelper) ValidatePassCode(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePassCode", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatePassCode indicates an expected call of ValidatePassCode.
func (mr *MockRegistrationHelperMockRecorder) ValidatePassCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePassCode", reflect.TypeOf((*MockRegistrationHelper)(nil).ValidatePassCode), arg0, arg1)
}
