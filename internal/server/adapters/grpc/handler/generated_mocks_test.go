// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/StasMerzlyakov/gophkeeper/internal/server/adapters/grpc/handler (interfaces: Registrator,DataAccessor,AuthService)

// Package handler_test is a generated GoMock package.
package handler_test

import (
	context "context"
	reflect "reflect"

	domain "github.com/StasMerzlyakov/gophkeeper/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockRegistrator is a mock of Registrator interface.
type MockRegistrator struct {
	ctrl     *gomock.Controller
	recorder *MockRegistratorMockRecorder
}

// MockRegistratorMockRecorder is the mock recorder for MockRegistrator.
type MockRegistratorMockRecorder struct {
	mock *MockRegistrator
}

// NewMockRegistrator creates a new mock instance.
func NewMockRegistrator(ctrl *gomock.Controller) *MockRegistrator {
	mock := &MockRegistrator{ctrl: ctrl}
	mock.recorder = &MockRegistratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistrator) EXPECT() *MockRegistratorMockRecorder {
	return m.recorder
}

// GetEMailStatus mocks base method.
func (m *MockRegistrator) GetEMailStatus(arg0 context.Context, arg1 string) (domain.EMailStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEMailStatus", arg0, arg1)
	ret0, _ := ret[0].(domain.EMailStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEMailStatus indicates an expected call of GetEMailStatus.
func (mr *MockRegistratorMockRecorder) GetEMailStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEMailStatus", reflect.TypeOf((*MockRegistrator)(nil).GetEMailStatus), arg0, arg1)
}

// InitMasterKey mocks base method.
func (m *MockRegistrator) InitMasterKey(arg0 context.Context, arg1 domain.SessionID, arg2 *domain.MasterKeyData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitMasterKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitMasterKey indicates an expected call of InitMasterKey.
func (mr *MockRegistratorMockRecorder) InitMasterKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitMasterKey", reflect.TypeOf((*MockRegistrator)(nil).InitMasterKey), arg0, arg1, arg2)
}

// PassOTP mocks base method.
func (m *MockRegistrator) PassOTP(arg0 context.Context, arg1 domain.SessionID, arg2 string) (domain.SessionID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PassOTP", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.SessionID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PassOTP indicates an expected call of PassOTP.
func (mr *MockRegistratorMockRecorder) PassOTP(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PassOTP", reflect.TypeOf((*MockRegistrator)(nil).PassOTP), arg0, arg1, arg2)
}

// Registrate mocks base method.
func (m *MockRegistrator) Registrate(arg0 context.Context, arg1 *domain.EMailData) (domain.SessionID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registrate", arg0, arg1)
	ret0, _ := ret[0].(domain.SessionID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Registrate indicates an expected call of Registrate.
func (mr *MockRegistratorMockRecorder) Registrate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registrate", reflect.TypeOf((*MockRegistrator)(nil).Registrate), arg0, arg1)
}

// MockDataAccessor is a mock of DataAccessor interface.
type MockDataAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockDataAccessorMockRecorder
}

// MockDataAccessorMockRecorder is the mock recorder for MockDataAccessor.
type MockDataAccessorMockRecorder struct {
	mock *MockDataAccessor
}

// NewMockDataAccessor creates a new mock instance.
func NewMockDataAccessor(ctrl *gomock.Controller) *MockDataAccessor {
	mock := &MockDataAccessor{ctrl: ctrl}
	mock.recorder = &MockDataAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataAccessor) EXPECT() *MockDataAccessorMockRecorder {
	return m.recorder
}

// GetHelloData mocks base method.
func (m *MockDataAccessor) GetHelloData(arg0 context.Context) (*domain.HelloData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHelloData", arg0)
	ret0, _ := ret[0].(*domain.HelloData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHelloData indicates an expected call of GetHelloData.
func (mr *MockDataAccessorMockRecorder) GetHelloData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHelloData", reflect.TypeOf((*MockDataAccessor)(nil).GetHelloData), arg0)
}

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// CheckOTP mocks base method.
func (m *MockAuthService) CheckOTP(arg0 context.Context, arg1 domain.SessionID, arg2 string) (domain.JWTToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOTP", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.JWTToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOTP indicates an expected call of CheckOTP.
func (mr *MockAuthServiceMockRecorder) CheckOTP(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOTP", reflect.TypeOf((*MockAuthService)(nil).CheckOTP), arg0, arg1, arg2)
}

// Login mocks base method.
func (m *MockAuthService) Login(arg0 context.Context, arg1 *domain.EMailData) (domain.SessionID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(domain.SessionID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), arg0, arg1)
}
